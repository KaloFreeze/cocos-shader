// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        center : { value: [0.5, 0.5] }
        wave_offset : { value: 0.1 }
        wave_radius : { value: 0.2 }
        wh_ratio : { value: 1}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  out vec4 v_time;
  // out vec4 v_screenSize;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_time = cc_time;
    // v_screenSize = cc_screenSize;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec4 v_time;
  // in vec4 v_screenSize;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Constant {
    vec2 center;
    float wave_radius;
    float wave_offset;
    float wh_ratio;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 distance_vec = center - v_uv0;
    distance_vec *= vec2(wh_ratio, 1.0);
    float distance = length(distance_vec);

    float sin_factor = sin(100.0 * distance + v_time.x) * 0.05;
    
    float dis_factor = clamp(wave_radius - abs(distance - wave_offset), 0.0, 1.0);

    vec2 uv = v_uv0 + normalize(distance_vec) * dis_factor * sin_factor;

    #if USE_TEXTURE
      CCTexture(texture, uv, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
